<template>
  <div class="page" data-name="home">
    <!-- Top Navbar -->
    <div class="navbar navbar-large">
      <div class="navbar-bg"></div>
      <div class="navbar-inner">
        <div class="title sliding">WheresMyFlight</div>
        <div class="title-large">
          <div class="title-large-text">WheresMyFlight</div>
        </div>
      </div>
    </div>
    <!-- Scrollable page content-->
    <div class="page-content">
      <div class="block">
        <a href="/add-flight" class="button button-fill">Add Flight</a>
      </div>

      <div class="block-title">Flights</div>
        <div id="flightslist">
        </div>
        <br></br>
    </div>
  </div>
</template>
<script>
  const { Client, Databases, ID } = Appwrite;
  const client = new Client();
  client
      .setEndpoint('https://appwrite.shuchir.dev/v1')
      .setProject('wheresmyflight');
  const databases = new Databases(client);
  
  export default () => {
    const promise = databases.listDocuments('data', 'flights');

    promise.then(function (response) {
        let docs = response.documents;
        let flightslist = document.getElementById('flightslist');
        for (let i=0; i<docs.length; i++) {
          let dep = new Date(Date.parse(docs[i].time[0].replace("+00:00", "-04:00"))).toLocaleTimeString().replace(":00", "")
          let schedDep = new Date(Date.parse(docs[i].fullData[19].replace("+00:00", "-04:00"))).toLocaleTimeString().replace(":00", "")
          let arr = new Date(Date.parse(docs[i].time[1].replace("+00:00", "-04:00"))).toLocaleTimeString().replace(":00", "")
          let schedArr = new Date(Date.parse(docs[i].fullData[22].replace("+00:00", "-04:00"))).toLocaleTimeString().replace(":00", "")

          let depDiffNum = (new Date(Date.parse(docs[i].time[0].replace("+00:00", "-04:00"))).getTime() - new Date(Date.parse(docs[i].fullData[19].replace("+00:00", "-04:00"))).getTime()) / 60000;
          let depDiffText = ""
          if (depDiffNum < 0) {
            depDiffNum *= -1;
            depDiffText = "early"
          }
          else {
            depDiffText = "late"
          }
          let depDiff = depDiffNum%60 + "min";
          if (Math.floor(depDiffNum/60) > 0) {
            depDiff = Math.floor(depDiffNum/60) + "hr " + depDiff
          }
          if (depDiffNum == 0) {
            depDiff = "on time"
            depDiffText = ""
          }

          let arrDiffNum = (new Date(Date.parse(docs[i].time[1].replace("+00:00", "-04:00"))).getTime() - new Date(Date.parse(docs[i].fullData[22].replace("+00:00", "-04:00"))).getTime()) / 60000;
          let arrDiffText = ""
          if (arrDiffNum < 0) {
            arrDiffNum *= -1;
            arrDiffText = "early"
          }
          else {
            arrDiffText = "late"
          }
          let arrDiff = arrDiffNum%60 + "min";
          if (Math.floor(arrDiffNum/60) > 0) {
            arrDiff = Math.floor(arrDiffNum/60) + "hr " + arrDiff
          }
          if (arrDiffNum == 0) {
            arrDiff = "on time"
            arrDiffText = ""
          }
          let timeLeft = ""
          if (new Date(Date.parse(docs[i].time[0].replace("+00:00", "-04:00"))).getTime() - new Date().getTime() < 0 && new Date(Date.parse(docs[i].time[1].replace("+00:00", "-04:00"))).getTime() - new Date().getTime() > 0) {
            let hrsleft = Math.floor((new Date(Date.parse(docs[i].time[1].replace("+00:00", "-04:00"))).getTime() - new Date().getTime()) / 60000 / 60)
            let minsleft = Math.floor((new Date(Date.parse(docs[i].time[1].replace("+00:00", "-04:00"))).getTime() - new Date().getTime()) / 60000 % 60)
            timeLeft = minsleft + "min left"
            if (hrsleft > 0) {
              timeLeft = hrsleft + "hr " + timeLeft
            }
          }
          else if (new Date(Date.parse(docs[i].time[0].replace("+00:00", "-04:00"))).getTime() - new Date().getTime() > 0) {
            timeLeft = "Departing in " + Math.floor((new Date(Date.parse(docs[i].time[0].replace("+00:00", "-04:00"))).getTime() - new Date().getTime()) / 60000) + "min"
          }
          else {
            timeLeft = "Arrived"
          }

          flightslist.innerHTML += `
              <div class="card demo-card-header-pic">
                <a href="/flight/${docs[i].flightId}">
                <div style="background-image:url(https://flightaware.com/images/airline_logos/90p/${docs[i]['iata-code']}.png)"
                  valign="bottom" class="card-header hasimage"></div>
                <div class="card-content card-content-padding">
                  <div class="card-header">${docs[i].flightId}</div>
                  <div class="card-row">
                    <p>${docs[i].location[0]}</p>
                    <p>${docs[i].location[1]}</p>
                  </div>
                  <div class="card-row">
                    <div class="airportrow"><p class="big">${docs[i].airport[0]}</p><p class="kindofbig">${dep}</p></div>
                    <div class="item-after airportrow"><span class="badge color-blue" style="color: black;">${timeLeft}</span></div>
                    <div class="airportrow"><p class="kindofbig">${arr}</p><p class="big">${docs[i].airport[1]}</p></div>
                  </div>
                  <div class="card-row">
                      <div class="airportrow"><p class="mt-0 mb-0">Gate ${docs[i].gate[0]}</p><span class="badge color-${depDiffText == 'late' ? 'red' : 'green'}" style="color: black;">${depDiff} ${depDiffText}</span></div>
                      <div class="airportrow"><span class="badge color-${arrDiffText == 'late' ? 'red' : 'green'}" style="color: black;">${arrDiff} ${arrDiffText}</span><p class="mt-0 mb-0">Gate ${docs[i].gate[1]}</p></div>
                  </div>
                </div>
              </a>
              </div>`;
        }
    }, function (error) {
        console.log(error); // Failure
    });
    return $render;
  }
</script>