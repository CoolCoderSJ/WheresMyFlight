<template>
  <div class="page" data-name="home">
    <!-- Top Navbar -->
     <style>
      .bottom-bar {
          background-color: black;
          position: absolute;
          left: 0;
          right: 0;
          padding-top: 10px;
          padding-bottom: 10px;
          border-radius: 0 0 10px 10px;
          padding-left: 20px;
          padding-right: 20px;
      }

      .flightCard {
        margin-bottom: 45px;
      }
     </style>
    <div class="navbar navbar-large">
      <div class="navbar-bg" style="background-color: #201c1c"></div>
      <div class="navbar-inner">
        <div class="title sliding">WheresMyFlight</div>
        <div class="title-large">
          <div class="title-large-text">WheresMyFlight</div>
        </div>
        <div class="right" style="margin-top: 18px;">
          <a href="/settings" class="link icon-only">
              <i class="icon"><span class="material-icons">settings</span></i>
          </a>
        </div>
      </div>
    </div>
    <!-- Scrollable page content-->
    <div class="page-content ptr-content" @ptr:refresh=${loadMore}>
      <div class="ptr-preloader">
        <div class="preloader"></div>
        <div class="ptr-arrow"></div>
      </div>
      <div id="loggedOutContent" style="display: none;">
        <div class="block">
          <a href="/login" class="button button-fill" onclick="navigator.vibrate(25);">Login/Signup</a>
        </div>
      </div>
      <div id="loggedInContent">
      <div class="block-title">Trips</div>
      <div class="block">
        <a href="/add-trip" class="button button-fill" onclick="navigator.vibrate(25);">New Trip</a>
      </div>
      <div id="tripslist"></div>
      <br></br>

      <div class="block-title">Flights</div>
        <div class="block">
          <a href="/add-flight" class="button button-fill" onclick="navigator.vibrate(25);">Add Flight</a>
        </div>
        <div id="flightslist">
        </div>
        <br></br>
      </div>
    </div>
  </div>
</template>
<script>
  const { Client, Databases, ID, Functions } = Appwrite;
  const client = new Client();
  client
      .setEndpoint('https://appwrite.shuchir.dev/v1')
      .setProject('wheresmyflight');
  const databases = new Databases(client);
  const functions = new Functions(client);

  
  export default (props, { $update, $, $f7, $on, $onBeforeMount, $onMounted, $onBeforeUnmount, $onUnmounted }) => {
    const colorThief = new ColorThief();

    $on("pageInit", () => {
      let login = localStorage.getItem("login");
      if (!login) {
        console.log("not logged in")
        document.getElementById("loggedOutContent").style.display = "block";
        document.getElementById("loggedInContent").style.display = "none";
      }
    })

    let data = localStorage.getItem("data");
    if (!data) {
      databases.listDocuments('data', 'flights').then((resp) => {
      localStorage.setItem("data", JSON.stringify(resp.documents))
      console.log(resp)
      }).then(() => loadPage(localStorage.getItem("data")))
    }
    else {
      console.log("data already saved")
      loadPage(data)
      databases.listDocuments('data', 'flights').then((resp) => {
      localStorage.setItem("data", JSON.stringify(resp.documents))
      console.log(resp)
      })
    }
    function loadPage(data) {
      console.log("load page called")
    window.addEventListener("load", () => {
      console.log("load event listener called")

    databases.listDocuments("data", "trips").then(trips => {
      trips.documents.forEach(trip => {
        document.getElementById("tripslist").innerHTML += `<div class="card demo-card-header-pic" onclick="navigator.vibrate(25);">
            <a href="/trip/${trip.$id}">
            <div class="card-content card-content-padding" style="padding: 25px;">
              <div class="card-row" style="justify-content: inherit; gap: 20px; align-items: center">
              <p class="big light">${trip.name}</p>
                </div>
              <div class="card-row">
                <p>${new Date(trip.start.split("+")[0]).toDateString().split(" ").splice(1,2).join(" ")} - ${new Date(trip.end.split("+")[0]).toDateString().split(" ").splice(1,2).join(" ")}</p>
              </div>
            </div>
          </a>
          </div>`;
      });
    })
      
    let docs = JSON.parse(data);
    docs.reverse()
    let flightslist = document.getElementById('flightslist');
    flightslist.innerHTML = ""
    for (let i=0; i<docs.length; i++) {
      console.log(docs[i].time)
      let dep, schedDep, arr, schedArr
      schedDep = new Date(Date.parse(docs[i].scheduledTime[0])).toUTCString().split(":00 GMT ")[0].split(" ")[4].slice(0, 5)
      schedArr = new Date(Date.parse(docs[i].scheduledTime[1])).toUTCString().split(":00 GMT ")[0].split(" ")[4].slice(0, 5)
      if (docs[i].time[0]) dep = new Date(Date.parse(docs[i].time[0])).toUTCString().split(":00 GMT ")[0].split(" ")[4].slice(0, 5)
      if (docs[i].time[1]) arr = new Date(Date.parse(docs[i].time[1])).toUTCString().split(":00 GMT ")[0].split(" ")[4].slice(0, 5)
      if (docs[i].scheduledTime[0] && !docs[i].time[0]) { docs[i].time[0] = docs[i].scheduledTime[0]; dep = schedDep }
      if (docs[i].scheduledTime[1] && !docs[i].time[1]) { docs[i].time[1] = docs[i].scheduledTime[1]; arr = schedArr }

      function tConvert (time) {
        // Check correct time format and split into components
        time = time.toString ().match (/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [time];

        if (time.length > 1) { // If time format correct
          time = time.slice (1);  // Remove full string match value
          time[5] = +time[0] < 12 ? ' AM' : ' PM'; // Set AM/PM
          time[0] = +time[0] % 12 || 12; // Adjust hours
        }
        return time.join (''); // return adjusted time or original string
      }

      try {dep = tConvert(dep)}
      catch {console.log("could not get tz for dep")}
      try {arr = tConvert(arr)}
      catch {console.log("could not get tz for arr")} 
      try {schedDep = tConvert(schedDep)}
      catch {console.log("could not get tz for scheddep")}
      try {schedArr = tConvert(schedArr)}
      catch {console.log("could not get tz for schedarr")}

      console.log(docs[i])
    
      let depDiffNum = (new Date(Date.parse(docs[i].time[0])).getTime() - new Date(Date.parse(docs[i].scheduledTime[0])).getTime()) / 60000;
      let depDiffText = ""
      if (depDiffNum < 0) {
        depDiffNum *= -1;
        depDiffText = "early"
      }
      else {
        depDiffText = "late"
      }
      let depDiff = depDiffNum%60 + "min";
      if (Math.floor(depDiffNum/60) > 0) {
        depDiff = Math.floor(depDiffNum/60) + "hr " + depDiff
      }
      if (depDiffNum == 0) {
        depDiff = "on time"
        depDiffText = ""
      }

      let arrDiffNum = (new Date(Date.parse(docs[i].time[1])).getTime() - new Date(Date.parse(docs[i].scheduledTime[1])).getTime()) / 60000;
      let arrDiffText = ""
      if (arrDiffNum < 0) {
        arrDiffNum *= -1;
        arrDiffText = "early"
      }
      else {
        arrDiffText = "late"
      }
      let arrDiff = arrDiffNum%60 + "min";
      if (Math.floor(arrDiffNum/60) > 0) {
        arrDiff = Math.floor(arrDiffNum/60) + "hr " + arrDiff
      }
      if (arrDiffNum == 0) {
        arrDiff = "on time"
        arrDiffText = ""
      }

      let gates = [docs[i].gate[0], docs[i].gate[1]]
      let terminals = [docs[i].fullData[6], docs[i].fullData[11]]

      if (!gates[0]) gates[0] = ""
      else gates[0] = "Gate " + gates[0]
      if (!gates[1]) gates[1] = ""
      else gates[1] = "Gate " + gates[1]
      if (!terminals[0]) terminals[0] = ""
      else terminals[0] = "Terminal " + terminals[0]
      if (!terminals[1]) terminals[1] = ""
      else terminals[1] = "Terminal " + terminals[1]

      console.log(flightslist)
      flightslist.innerHTML += `
          <div class="card demo-card-header-pic flightCard" id="${docs[i].$id}card" onclick="navigator.vibrate(25);">
            <a href="/flight/${docs[i].$id}">
            <div class="card-content card-content-padding" style="padding-top: 5px;">
              <div class="card-row">
                <p>${docs[i].location[0]}</p>
                <p>${docs[i].location[1]}</p>
              </div>
              <div class="card-row">
                <div class="airportrow"><p class="big">${docs[i].airport[0]}</p><p class="kindofbig" style="color: ${depDiffText == 'late' ? 'red' : '#90EE90'}">${dep} ${docs[i].fullData[2]}</p></div>
                <div class="airportrow"><p class="kindofbig" style="color: ${arrDiffText == 'late' ? 'red' : '#90EE90'}">${arr} ${docs[i].fullData[7]}</p><p class="big">${docs[i].airport[1]}</p></div>
              </div>
              <div class="card-row" style="margin-bottom: 15px;">
                  <div class="airportrow"><p class="mt-0 mb-0">${terminals[0]} ${gates[0]}</p></div>
                  <div class="airportrow"><p class="mt-0 mb-0">${terminals[1]} ${gates[1]}</p></div>
              </div>
              <div class="card-row bottom-bar" style="background-color: black;">
                  <div class="airportrow"><p class="mt-0 mb-0" style="font-weight: bold;">${docs[i].flightId} &bull; ${new Date(docs[i].scheduledTime[0].split("+")[0]).toDateString().split(" ").splice(1,3).join(" ")}</p></div>
                  <div class="airportrow"><img class="mb-0 mt-0" style="scale: 0.8; width: 100%; height: 25px; object-fit: fill;" src="https://assets.duffel.com/img/airlines/for-light-background/full-color-logo/${docs[i]['iata-code']}.svg" id="${docs[i].$id}img" crossorigin="anonymous"></div>
              </div>
            </div>
          </a>
          </div>`;
          const rgbToHex = (r, g, b) => '#' + [r, g, b].map(x => {
            const hex = x.toString(16)
            return hex.length === 1 ? '0' + hex : hex
          }).join('')

          function shadeColor(color, percent) {

            var R = parseInt(color.substring(1,3),16);
            var G = parseInt(color.substring(3,5),16);
            var B = parseInt(color.substring(5,7),16);

            R = parseInt(R * (100 + percent) / 100);
            G = parseInt(G * (100 + percent) / 100);
            B = parseInt(B * (100 + percent) / 100);

            R = (R<255)?R:255;  
            G = (G<255)?G:255;  
            B = (B<255)?B:255;  

            R = Math.round(R)
            G = Math.round(G)
            B = Math.round(B)

            var RR = ((R.toString(16).length==1)?"0"+R.toString(16):R.toString(16));
            var GG = ((G.toString(16).length==1)?"0"+G.toString(16):G.toString(16));
            var BB = ((B.toString(16).length==1)?"0"+B.toString(16):B.toString(16));

            return "#"+RR+GG+BB;
            }

          let img = document.getElementById(docs[i].$id + "img")
          img.addEventListener("load", ()=>{
            let color = colorThief.getColor(img);
            let hexcolor = rgbToHex(color[0], color[1], color[2])
            console.log(hexcolor)
            document.getElementById(docs[i].$id+"card").setAttribute("style", "background-color: "+shadeColor(hexcolor, -0.9)+"8c !important;")
          })

      }  
    })
    }


    const loadMore = (e, done) => {        
        databases.listDocuments('data', 'flights').then((resp) => {
        localStorage.setItem("data", JSON.stringify(resp.documents))
        console.log(resp)
        }).then(() => {
          $f7.views.main.router.refreshPage()
            $update();
            done();
        })
    }
  return $render;
  }
</script>