<template>
  <div class="page" data-name="home">
    <!-- Top Navbar -->
     <style>
      .bottom-bar {
          background-color: black;
          position: absolute;
          left: 0;
          right: 0;
          padding-top: 10px;
          padding-bottom: 10px;
          border-radius: 0 0 10px 10px;
          padding-left: 20px;
          padding-right: 20px;
      }

      .flightCard {
        margin-bottom: 45px;
      }
     </style>
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a href="#" class="link back">
            <i class="icon icon-back"></i>
            <span class="if-not-md">Back</span>
          </a>
        </div>
        <div class="title" id="title"></div>
      </div>
    </div>
    <!-- Scrollable page content-->
    <div class="page-content ptr-content" @ptr:refresh=${loadMore}>
      <div class="ptr-preloader">
        <div class="preloader"></div>
        <div class="ptr-arrow"></div>
      </div>

      <div class="block-title">Flights</div>
      <div class="block block-strong">
        <div class="list list-strong-ios list-outline-ios list-dividers-ios" style="margin-top: 0; margin-bottom: 0;">
          <ul>
            <li>
              <a class="item-link smart-select smart-select-init" data-open-in="sheet">
                <select id="flightSelect" multiple>
                  <option disabled>Select Flights</option>
                </select>
                <div class="item-content">
                  <div class="item-inner" id="flightInner">
                    <div class="item-title">Edit Trip Flights</div>
                  </div>
                </div>
              </a>
            </li>
          </ul>
        </div>
      </div>
        <div id="flightslistTrip">
        </div>
        <br></br>
        <a href="/add-flight" class="button button-fill" id="add_flight" style="margin: 20px;" onclick="navigator.vibrate(25);">Add Flight</a>
        <a href="#" class="button button-fill color-red" id="delete_trip" style="margin: 20px;" onclick="navigator.vibrate(25);">Delete Trip</a>
    </div>
  </div>
</template>
<script>
  const { Client, Databases, ID, Functions, Query } = Appwrite;
  const client = new Client();
  client
      .setEndpoint('https://appwrite.shuchir.dev/v1')
      .setProject('wheresmyflight');
  const databases = new Databases(client);
  const functions = new Functions(client);

  
  export default (props, { $update, $, $f7, $f7route, $on, $onBeforeMount, $onMounted, $onBeforeUnmount, $onUnmounted }) => {
    const colorThief = new ColorThief();

      console.log("load page called 2")
    $on("pageInit", () => {
      console.log("load event listener called 2")

    let tripId = $f7route.path.split("/")[2]

    $("#flightSelect").on("change", function() {
      let selected = $("#flightSelect").val()
      console.log(selected)
      databases.updateDocument("data", "trips", tripId, {
        flights: selected
      }).then(() => {
        $f7.dialog.alert("Flights updated successfully", "Success", () => {
          databases.listDocuments("data", "trips").then((data) => {
            localStorage.setItem("trips", JSON.stringify(data.documents))
            $f7.views.main.router.refreshPage()
          })
        })
      })
    })

    $("#delete_trip").on("click", function() {
      $f7.dialog.confirm("Are you sure you want to delete this trip?", "Delete Trip", () => {
        databases.updateDocument("data", "trips", tripId, {
          flights: []
        })
        .then(() => {
          databases.deleteDocument("data", "trips", tripId).then(() => {
            databases.listDocuments("data", "trips").then((data) => {
              localStorage.setItem("trips", JSON.stringify(data.documents))
              $f7.dialog.alert("Trip deleted successfully", "Success", () => {
                $f7.views.main.router.navigate("/")
              })
            })
          })
          .catch((err) => {
            console.error(err)
            $f7.dialog.alert("Error deleting trip", "Error")
          })
        })
      })
    })

    let trips = localStorage.getItem("trips");
    let trip

    if (!trips) {
        databases.listDocuments('data', 'trips', [Query.limit(100)]).then((resp) => {
        localStorage.setItem("trips", JSON.stringify(resp.documents))
        console.log(resp)
        }).then(() => {
            $f7.views.main.router.refreshPage()
            $update();
        })
    }
    else {
        for (let i=0; i<JSON.parse(trips).length; i++) {
          if (JSON.parse(trips)[i].$id == tripId) {
            trip = JSON.parse(trips)[i]
            break
          }
        }
    }

      console.log(trip)
      $("#title").html(trip.name)

      let flights = trip.flights;
      console.log(flights)
      // flights.reverse();

      let flightCodes = [];
      for (let i=0; i<flights.length; i++) {
        flightCodes.push(flights[i].flightId)
      }

      databases.listDocuments("data", "flights", [Query.limit(100)]).then(flights => {
        flights.documents.forEach(flight => {
          $("#flightSelect").append(`<option value="${flight.$id}" id="select${flight.$id}">${flight.flightId} - ${new Date(flight.scheduledTime[0]).toDateString().split(" ").splice(1,3).join(" ")}</option>`)
        });
      })
      .then(() => {
        for (let i=0; i<trip.flights.length; i++) {
          console.log(`select${trip.flights[i].$id}`)
          document.getElementById(`select${trip.flights[i].$id}`).selected = true;
        }
      })

      $("#flightInner").html($("#flightInner").html() + `<div class="item-after" id="notifTargetAfter">${flightCodes.join(", ")}</div>`)

      let flightslist = document.getElementById('flightslistTrip');
      flightslist.innerHTML = ""
      for (let i=0; i<flights.length; i++) {
        console.log("FLIGHT", flights[i])
        console.log(flights[i].time)
        let dep, schedDep, arr, schedArr
        schedDep = new Date(Date.parse(flights[i].scheduledTime[0])).toUTCString().split(":00 GMT ")[0].split(" ")[4].slice(0, 5)
        schedArr = new Date(Date.parse(flights[i].scheduledTime[1])).toUTCString().split(":00 GMT ")[0].split(" ")[4].slice(0, 5)
        if (flights[i].time[0]) dep = new Date(Date.parse(flights[i].time[0])).toUTCString().split(":00 GMT ")[0].split(" ")[4].slice(0, 5)
        if (flights[i].time[1]) arr = new Date(Date.parse(flights[i].time[1])).toUTCString().split(":00 GMT ")[0].split(" ")[4].slice(0, 5)
        if (flights[i].scheduledTime[0] && !flights[i].time[0]) { flights[i].time[0] = flights[i].scheduledTime[0]; dep = schedDep }
        if (flights[i].scheduledTime[1] && !flights[i].time[1]) { flights[i].time[1] = flights[i].scheduledTime[1]; arr = schedArr }

        function tConvert (time) {
          // Check correct time format and split into components
          time = time.toString ().match (/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [time];

          if (time.length > 1) { // If time format correct
            time = time.slice (1);  // Remove full string match value
            time[5] = +time[0] < 12 ? ' AM' : ' PM'; // Set AM/PM
            time[0] = +time[0] % 12 || 12; // Adjust hours
          }
          return time.join (''); // return adjusted time or original string
        }

        try {dep = tConvert(dep)}
        catch {console.log("could not get tz for dep")}
        try {arr = tConvert(arr)}
        catch {console.log("could not get tz for arr")} 
        try {schedDep = tConvert(schedDep)}
        catch {console.log("could not get tz for scheddep")}
        try {schedArr = tConvert(schedArr)}
        catch {console.log("could not get tz for schedarr")}

        console.log(flights[i])
      
        let depDiffNum = (new Date(Date.parse(flights[i].time[0])).getTime() - new Date(Date.parse(flights[i].scheduledTime[0])).getTime()) / 60000;
        let depDiffText = ""
        if (depDiffNum < 0) {
          depDiffNum *= -1;
          depDiffText = "early"
        }
        else {
          depDiffText = "late"
        }
        let depDiff = depDiffNum%60 + "min";
        if (Math.floor(depDiffNum/60) > 0) {
          depDiff = Math.floor(depDiffNum/60) + "hr " + depDiff
        }
        if (depDiffNum == 0) {
          depDiff = "on time"
          depDiffText = ""
        }

        let arrDiffNum = (new Date(Date.parse(flights[i].time[1])).getTime() - new Date(Date.parse(flights[i].scheduledTime[1])).getTime()) / 60000;
        let arrDiffText = ""
        if (arrDiffNum < 0) {
          arrDiffNum *= -1;
          arrDiffText = "early"
        }
        else {
          arrDiffText = "late"
        }
        let arrDiff = arrDiffNum%60 + "min";
        if (Math.floor(arrDiffNum/60) > 0) {
          arrDiff = Math.floor(arrDiffNum/60) + "hr " + arrDiff
        }
        if (arrDiffNum == 0) {
          arrDiff = "on time"
          arrDiffText = ""
        }

        let gates = [flights[i].gate[0], flights[i].gate[1]]
        let terminals = [flights[i].fullData[6], flights[i].fullData[11]]

        if (!gates[0]) gates[0] = ""
        else gates[0] = "Gate " + gates[0]
        if (!gates[1]) gates[1] = ""
        else gates[1] = "Gate " + gates[1]
        if (!terminals[0]) terminals[0] = ""
        else terminals[0] = "Terminal " + terminals[0]
        if (!terminals[1]) terminals[1] = ""
        else terminals[1] = "Terminal " + terminals[1]

        let bstr = ""
        if (flights[i].baggageClaim) bstr = "Claim " + flights[i].baggageClaim

        console.log(flightslist)
        let edt = new Date(Date.parse(flights[i].fullData[20]));
        console.log(i, "EDT", edt)

        if (i != 0) {
          let prevEat = new Date(Date.parse(flights[i-1].fullData[23]));
          let timeDiff = edt - prevEat;
          console.log(i, "prevEat", prevEat)
          console.log(i, "TIME DIFF", timeDiff)

          if (timeDiff < 86400000) {
            console.log(i, "TIME DIFF", timeDiff)
            let hours = Math.floor(timeDiff / 3600000);
            let minutes = Math.floor((timeDiff - (hours * 3600000)) / 60000);
            console.log(i, "HOURS", hours)
            console.log(i, "MINUTES", minutes)
            
            flightslist.innerHTML += `<p style="width: 100%; text-align: center; color: #d8d8d8; font-weight: 700;">${hours}h ${minutes}min layover</p>`
          }
          
          else {
            flightslist.innerHTML += `<div class="block-title" style="margin-top: 100px; margin-left: 20px;">${new Date(flights[i].scheduledTime[0].split("+")[0]).toDateString().split(" ").splice(1,3).join(" ")}</div>`
          }
        }

        else {
          flightslist.innerHTML += `<div class="block-title" style="margin-left: 20px;">${new Date(flights[i].scheduledTime[0].split("+")[0]).toDateString().split(" ").splice(1,3).join(" ")}</div>`
        }
        
        flightslist.innerHTML += `
            <div class="card demo-card-header-pic flightCard" id="trip_${flights[i].$id}card" onclick="navigator.vibrate(25);">
              <a href="/flight/${flights[i].$id}">
              <div class="card-content card-content-padding" style="padding-top: 5px;">
                <div class="card-row">
                  <p>${flights[i].location[0]}</p>
                  <p>${flights[i].location[1]}</p>
                </div>
                <div class="card-row">
                  <div class="airportrow"><p class="big">${flights[i].airport[0]}</p><p class="kindofbig" style="color: ${depDiffText == 'late' ? 'red' : '#90EE90'}">${dep} ${flights[i].fullData[2]}</p></div>
                  <div class="airportrow"><p class="kindofbig" style="color: ${arrDiffText == 'late' ? 'red' : '#90EE90'}">${arr} ${flights[i].fullData[7]}</p><p class="big">${flights[i].airport[1]}</p></div>
                </div>
                <div class="card-row" style="margin-bottom: 15px;">
                    <div class="airportrow"><p class="mt-0 mb-0">${terminals[0]} ${gates[0]}</p></div>
                    <div class="airportrow"><p class="mt-0 mb-0">${terminals[1]} ${gates[1]}</p></div>
                </div>
                <div class="card-row bottom-bar" style="background-color: black;">
                    <div class="airportrow"><p class="mt-0 mb-0" style="font-weight: bold;">${flights[i].flightId} &bull; <span style="font-weight: normal !important">${new Date(flights[i].scheduledTime[0].split("+")[0]).toDateString().split(" ").splice(1,3).join(" ")}</span> &nbsp;&nbsp;&nbsp; <span style="font-weight: normal !important;">${bstr}</span></p></div>
                    <div class="airportrow"><img class="mb-0 mt-0" style="scale: 0.8; height: 25px; object-fit: fill;" src="https://assets.duffel.com/img/airlines/for-light-background/full-color-logo/${flights[i]['iata-code']}.svg" id="trip_${flights[i].$id}img" crossorigin="anonymous"></div>
                </div>
              </div>
            </a>
            </div>`;
            const rgbToHex = (r, g, b) => '#' + [r, g, b].map(x => {
              const hex = x.toString(16)
              return hex.length === 1 ? '0' + hex : hex
            }).join('')

            function shadeColor(color, percent) {

              var R = parseInt(color.substring(1,3),16);
              var G = parseInt(color.substring(3,5),16);
              var B = parseInt(color.substring(5,7),16);

              R = parseInt(R * (100 + percent) / 100);
              G = parseInt(G * (100 + percent) / 100);
              B = parseInt(B * (100 + percent) / 100);

              R = (R<255)?R:255;  
              G = (G<255)?G:255;  
              B = (B<255)?B:255;  

              R = Math.round(R)
              G = Math.round(G)
              B = Math.round(B)

              var RR = ((R.toString(16).length==1)?"0"+R.toString(16):R.toString(16));
              var GG = ((G.toString(16).length==1)?"0"+G.toString(16):G.toString(16));
              var BB = ((B.toString(16).length==1)?"0"+B.toString(16):B.toString(16));

              return "#"+RR+GG+BB;
              }

            let img = document.getElementById("trip_" + flights[i].$id + "img")
            img.addEventListener("load", ()=>{
              let color = colorThief.getColor(img);
              let hexcolor = rgbToHex(color[0], color[1], color[2])
              console.log(hexcolor)
              document.getElementById("trip_"+flights[i].$id+"card").setAttribute("style", "background-color: "+shadeColor(hexcolor, -0.9)+"8c !important;")
            })

        }
    })


    const loadMore = (e, done) => {        
        databases.listDocuments('data', 'flights').then((resp) => {
        localStorage.setItem("data", JSON.stringify(resp.documents))
        console.log(resp)
        }).then(() => {
            location.reload()
            $update();
            done();
        })
    }
  return $render;
  }
</script>