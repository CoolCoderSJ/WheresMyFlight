<template>
  <div class="page">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a href="#" class="link back">
            <i class="icon icon-back"></i>
            <span class="if-not-md">Back</span>
          </a>
        </div>
        <div class="title">Add Flight</div>
      </div>
    </div>
    <div class="page-content">
      <div class="block block-strong inset">
        <form id="form">
          <div class="list">
            <ul>
              <div class="grid grid-cols-2">
              <li class="item-content item-input item-input-outline">
                <div class="item-inner">
                  <div class="item-title item-floating-label">Airline Code</div>
                  <div class="item-input-wrap">
                    <input type="text" name="aircode" maxlength="3" />
                    <span class="input-clear-button"></span>
                  </div>
                </div>
              </li>
              <li class="item-content item-input item-input-outline">
                <div class="item-inner">
                  <div class="item-title item-floating-label">Flight Number</div>
                  <div class="item-input-wrap">
                    <input type="text" name="flightnum" maxlength="4" />
                    <span class="input-clear-button"></span>
                  </div>
                </div>
              </li>
              </div>
              <li class="item-content item-input item-input-outline">
                <div class="item-inner">
                  <div class="item-title item-floating-label">Flight Date</div>
                  <div class="item-input-wrap">
                    <input type="text" placeholder="Flight Date" id="date" name="date" />
                    <span class="input-clear-button"></span>
                  </div>
                </div>
              </li>
            </ul>
          </div>
        </form>
        <div class="block block-strong">
          <a class="button button-fill convert-form-to-data" href="#">Get Data</a>
        </div>
      </div>
    </div>
  </div>
</template>
<style>
  p {
    margin: 10px 0;
  }
</style>
<script>
  const { Client, Databases, ID } = Appwrite;
  const client = new Client();
  client
    .setEndpoint('https://appwrite.shuchir.dev/v1')
    .setProject('wheresmyflight');
  const databases = new Databases(client);

  export default function (props, { $, $f7, $on, $onBeforeMount, $onMounted, $onBeforeUnmount, $onUnmounted }) {
    $on('pageInit', () => {
      let date = $f7.calendar.create({
        inputEl: '#date',
      });

      $('.convert-form-to-data').on('click', function () {
        var formData = $f7.form.convertToData('#form'); 
        $f7.dialog.preloader('Getting flight data...');
        let aircode = formData.aircode;
        let flightnum = formData.flightnum;
        let date = formData.date;
        console.log(formData)
        let yr = date.split("/")[2];
        let month = date.split("/")[0];
        let day = date.split("/")[1];
        axios({
          method: 'get',
          url: `https://corsproxy.io?${encodeURIComponent(`https://www.flightstats.com/v2/api-next/flight-tracker/${aircode}/${flightnum}/${yr}/${month}/${day}/`)}`,
        })
          .then(function (response) {
            let flight = JSON.parse(response.data).data;
            let airport = [flight.departureAirport.iata, flight.arrivalAirport.iata];
            let location = [flight.departureAirport.name, flight.arrivalAirport.name];
            let time = [new Date(flight.schedule.estimatedActualDeparture+"Z"), new Date(flight.schedule.estimatedActualArrival+"Z")];
            let scheduledTime = [new Date(flight.departureAirport.date+"Z"), new Date(flight.arrivalAirport.date+"Z")];
            let iataCode = flight.ticketHeader.carrier.fs;
            let gate = [flight.departureAirport.gate, flight.arrivalAirport.gate];

            let aircraft = flight.additionalFlightInfo.equipment.name;
            let airline = flight.ticketHeader.carrier.name;

            let originTZ = flight.departureAirport.times.scheduled.timezone;
            let originAirport = airport[0] + " (" + flight.departureAirport.name + ")";
            let originCity = flight.departureAirport.city;
            let originGate = flight.departureAirport.gate;
            let originTerminal = flight.departureAirport.terminal;

            let destinationTZ = flight.arrivalAirport.times.scheduled.timezone;
            let destinationAirport = airport[1] + " (" + flight.arrivalAirport.name + ")";
            let destinationCity = flight.arrivalAirport.city;
            let destinationGate = flight.arrivalAirport.gate;
            let destinationTerminal = flight.arrivalAirport.terminal;

            let actualDist, plannedDist, takenDist;

            axios({
              method: 'get',
              url: `https://corsproxy.io?${encodeURIComponent(`https://www.flightstats.com/v2/api-next/flick/${flight.flightId}?guid=34b64945a69b9cac:5ae30721:13ca699d305:XXXX&airline=${aircode}&flight=${flightnum}&limit=${yr}-${month}-${day}&rqid=5zddfm823lq`)}`,
            }).then(resp => {
              let data = JSON.parse(resp.data).data;
              actualDist = Math.round(data.miniTracker.totalKilometers * 1.151) + "mi";
              plannedDist = Math.round(data.miniTracker.totalKilometers * 1.151) + "mi";
              takenDist = Math.round(data.miniTracker.kilometersFromDeparture * 1.151) + "mi";
              console.log(actualDist, plannedDist, takenDist)
            })
            
            console.log(actualDist, plannedDist, takenDist)
            let speed, altitude
            if (flight.positional.flexTrack.positions.length > 0) {
             speed = Math.round(flight.positional.flexTrack.positions[0].speedMph) + "mph";
             altitude = Math.round(flight.positional.flexTrack.positions[0].altitudeFt) + "ft";
            }
            else {
               speed = "--";
               altitude = "--";
            }
            let fuel = "--";

            let status = flight.flightState;

            let scheduledDepartureTime = new Date(flight.schedule.scheduledDeparture +"Z");
            let estimatedDepartureTime = new Date(flight.schedule.estimatedActualDeparture +"Z");
            let actualDepartureTime = new Date(flight.schedule.estimatedActualDeparture +"Z");

            let scheduledArrivalTime = new Date(flight.schedule.scheduledArrival +"Z");
            let estimatedArrivalTime = new Date(flight.schedule.estimatedActualArrival +"Z");
            let actualArrivalTime = new Date(flight.schedule.estimatedActualArrival +"Z");

            let coordinates = [];
            if (flight.positional.flexTrack.positions) {
            for (let i=0; i<flight.positional.flexTrack.positions.length;i++) {
              let coord = [flight.positional.flexTrack.positions[i].lat, flight.positional.flexTrack.positions[i].lon];
              coordinates.push(coord)
            }
            }
            coordinates = JSON.stringify(coordinates);

            console.log(airport, location, time, iataCode, gate);
            const promise = databases.createDocument(
              'data',
              'flights',
              ID.unique(),
              {
                flightId: formData.aircode + formData.flightnum,
                airport: airport,
                location: location,
                time: time,
                "iata-code": iataCode,
                gate: gate,
                scheduledTime: scheduledTime,
                fullData: [aircraft, airline, originTZ, originAirport, originCity, originGate, originTerminal, destinationTZ, destinationAirport, destinationCity, destinationGate, destinationTerminal, actualDist, plannedDist, takenDist, speed, altitude, fuel, status, scheduledDepartureTime, estimatedDepartureTime, actualDepartureTime, scheduledArrivalTime, estimatedArrivalTime, actualArrivalTime, aircode, flightnum, date],
                coordinates: coordinates
              },
            );

            promise.then(function (response) {
              $f7.dialog.close();
              console.log(response);
              $f7.views.main.router.navigate('/flight/'+formData.flightnum);
            }, function (error) {
              console.log(error);
            });
          });
      });
    });

    // Lifecycle
    $onBeforeMount(() => {
      console.log('onBeforeMount');
    });
    $onMounted(() => {
      console.log('onMounted');
    });
    $onBeforeUnmount(() => {
      console.log('onBeforeUnmount');
    });
    $onUnmounted(() => {
      console.log('onUnmounted');
    });

    // Page Events
    $on('pageMounted', (e, page) => {
      console.log('pageMounted', page);
    });
    $on('pageInit', (e, page) => {
      console.log('pageInit', page);
    });
    $on('pageBeforeIn', (e, page) => {
      console.log('pageBeforeIn', page);
    });
    $on('pageAfterIn', (e, page) => {
      console.log('pageAfterIn', page);
    });
    $on('pageBeforeOut', (e, page) => {
      console.log('pageBeforeOut', page);
    });
    $on('pageAfterOut', (e, page) => {
      console.log('pageAfterOut', page);
    });
    $on('pageBeforeRemove', (e, page) => {
      console.log('pageBeforeRemove', page);
    });

    // Return render function
    return $render;
  }
</script>