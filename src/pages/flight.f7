<template>
  <div class="page">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a href="#" class="link back">
            <i class="icon icon-back"></i>
            <span class="if-not-md">Back</span>
          </a>
        </div>
        <div class="title" id="flight-title">Flight ${$f7route.path.replace("/flight/", "")}</div>
      </div>
    </div>
    <div class="page-content">
      <div class="block block-strong" style="z-index: 9999; height: 335px;">
        <div id="map" style="height: 300px; border-radius: 8px;"></div>
      </div>
      <div class="block" id="btnsblock" style="display: flex; gap: 8px;">
        <a href="${$f7route.path + '/passes'}" class="button button-tonal" style="width: 100%" onclick="navigator.vibrate(25);">Boarding Passes</a>
        <a href="${$f7route.path.replace('flight', 'seats')}" class="button button-tonal" style="width: 100%" onclick="navigator.vibrate(25);">Seats</a>
      </div>
      <div class="timeline">
        <div class="timeline-item">
          <div class="timeline-item-date" id="timeline_gate_dep">21</div>
          <div class="timeline-item-divider"></div>
          <div class="timeline-item-content">
            <div class="timeline-item-inner">Gate Departure</div>
          </div>
        </div>
        <div class="timeline-item">
          <div class="timeline-item-date" id="timeline_runway_dep">22</div>
          <div class="timeline-item-divider"></div>
          <div class="timeline-item-content">
            <div class="timeline-item-inner">Runway Departure</div>
          </div>
        </div>
        <div class="timeline-item">
          <div class="timeline-item-date"></div>
          <div class="timeline-item-divider"></div>
          <div class="timeline-item-content">
            <div class="timeline-item-inner" id="timeline_flighttime">Flight en-route for </div>
          </div>
        </div>
        <div class="timeline-item">
          <div class="timeline-item-date" id="timeline_runway_arr">24</div>
          <div class="timeline-item-divider"></div>
          <div class="timeline-item-content">
            <div class="timeline-item-inner">Runway Arrival</div>
          </div>
        </div>
        <div class="timeline-item">
          <div class="timeline-item-date" id="timeline_gate_arr">24</div>
          <div class="timeline-item-divider"></div>
          <div class="timeline-item-content">
            <div class="timeline-item-inner">Gate Arrival</div>
          </div>
        </div>
      </div>
      <p class="block-title">General Info</p>
      <div class="block block-strong">
        <div class="row"><p class="block-title">Aircraft</p><p id="aircraft"></p></div>
        <div class="row"><p class="block-title">Airline Name</p><p id="airline"></p></div>
      </div>

      <p class="block-title">Start</p>
      <div class="block block-strong">
        <div class="row"><p class="block-title">Timezome</p><p id="origtz"></p></div>
        <div class="row"><p class="block-title">Airport</p><p id="origairport"></p></div>
        <div class="row"><p class="block-title">City</p><p id="origcity"></p></div>
      </div>

      <p class="block-title">Destination</p>
      <div class="block block-strong">
        <div class="row"><p class="block-title">Timezome</p><p id="desttz"></p></div>
        <div class="row"><p class="block-title">Airport</p><p id="destairport"></p></div>
        <div class="row"><p class="block-title">City</p><p id="destcity"></p></div>
      </div>

      <p class="block-title">Flight Data</p>
      <div class="block block-strong">
        <div class="row"><p class="block-title">Actual Distance</p><p id="actualdist"></p></div>
        <div class="row"><p class="block-title">Planned Distance</p><p id="plandist"></p></div>
        <div class="row"><p class="block-title">Taken Distance</p><p id="takendist"></p></div>
        </div>

        <div class="block-title">Speed</div>
        <div class="block block-strong block-outline">
          <div class="area-chart area-chart-lines speed-chart"></div>
        </div>
        <div class="block-title">Altitude</div>
        <div class="block block-strong block-outline">
          <div class="area-chart area-chart-lines alt-chart"></div>
        </div>

      <div class="block block-strong">
        <div class="row"><p class="block-title">Fuel Burned</p><p id="fuel"></p></div>
        <div class="row"><p class="block-title">Status</p><p id="status"></p></div>
      </div>

      <p class="block-title">Departure</p>
      <div class="block block-strong">
        <div class="row"><p class="block-title">Scheduled Gate Time</p><p id="scheddeptime"></p></div>
        <div class="row"><p class="block-title">Estimated Gate Time</p><p id="estdeptime"></p></div>
        <div class="row"><p class="block-title">Actual Gate Time</p><p id="actualdeptime"></p></div>
        <div class="row"><p class="block-title">Runway Time</p><p id="deprunway"></p></div>
        <div class="row"><p class="block-title">Gate</p><p id="origgate"></p></div>
        <div class="row"><p class="block-title">Terminal</p><p id="origterm"></p></div>
        </div>

    <p class="block-title">Arrival</p>
      <div class="block block-strong">
        <div class="row"><p class="block-title">Scheduled Gate Time</p><p id="schedarrtime"></p></div>
        <div class="row"><p class="block-title">Estimated Gate Time</p><p id="estarrtime"></p></div>
        <div class="row"><p class="block-title">Actual Gate Time</p><p id="actualarrtime"></p></div>
        <div class="row"><p class="block-title">Runway Time</p><p id="arrrunway"></p></div>
        <div class="row"><p class="block-title">Gate</p><p id="destgate"></p></div>
        <div class="row"><p class="block-title">Terminal</p><p id="destterm"></p></div>
        <div class="row"><p class="block-title">Baggage Claim</p><p id="baggageClaim"></p></div>
      </div>

      <div class="block block-strong">
        <div class="list list-strong-ios list-outline-ios list-dividers-ios" style="margin-top: 0; margin-bottom: 0;">
          <ul>
            <li>
              <a class="item-link smart-select smart-select-init" data-open-in="sheet">
                <select id="notifTargets" multiple>
                  <option disabled>Select a target</option>
                </select>
                <div class="item-content">
                  <div class="item-inner" id="notifTargetInner">
                    <div class="item-title">Notification Targets</div>
                  </div>
                </div>
              </a>
            </li>
          </ul>
        </div>
      </div>
    
      <div class="block block-strong">
        <a class="button button-tonal delete-flight color-red" href="#">Delete Flight</a>
      </div>
    </div>
  </div>
</template>
<style>
  p {
    margin: 10px 0;
  }
</style>
<script>
  const { Client, Databases, ID, Query } = Appwrite;
  const client = new Client();
  client
    .setEndpoint('https://appwrite.shuchir.dev/v1')
    .setProject('wheresmyflight');
  const databases = new Databases(client);

  export default function (props, { $, $f7, $f7route, $on, $onBeforeMount, $onMounted, $onBeforeUnmount, $onUnmounted }) {
    $on('pageInit', () => {
      let flightId = $f7route.path.replace("/flight/", "")
      let userId = localStorage.getItem("login");

      databases.getDocument("settings", "prefs", userId).then(resp => {
        console.log(resp)
        if (resp.ntfyTopic) {
          document.getElementById("notifTargets").innerHTML += `<option value="ntfy:${resp.ntfyTopic}" id="ntfy:${resp.ntfyTopic}">ntfy: ${resp.ntfyTopic}</option>`
        }
        resp.phoneNumbers.forEach(number => {
          document.getElementById("notifTargets").innerHTML += `<option value="sms:${number.phoneNumber}" id="sms:${number.phoneNumber}">sms: ${number.phoneNumber}</option>`
        });
      })
      .then(() => {
        databases.getDocument("data", "flights", flightId).then((response) => {
          for (let i=0; i<response.notificationTargets.length; i++) {
            document.getElementById(response.notificationTargets[i]).selected = true;
          }
          document.getElementById('notifTargetInner').innerHTML += `<div class="item-after" id="notifTargetAfter">${response.notificationTargets.join(", ")}</div>`
        })
      })
      .catch(() => {
        databases.createDocument("settings", "prefs", userId, {
          userId: userId,
        })
      })

      $("#notifTargets").on("change", function() {
        let targets = $("#notifTargets").val();
        console.log(targets)
        document.getElementById('notifTargetAfter').innerHTML = targets.join(", ")
        databases.updateDocument("data", "flights", flightId, {
          notificationTargets: targets
          })
        })

      databases.getDocument('data', 'flights', flightId).then((response) => {
        document.getElementById('flight-title').innerHTML = `Flight ${response.flightId}`
        document.getElementById("deprunway").innerHTML = response.runwayTimes[0]
        document.getElementById("arrrunway").innerHTML = response.runwayTimes[1]
        document.getElementById("baggageClaim").innerHTML = response.baggageClaim

        let flightDuration = response.flightDuration

        console.log(response)
      if (response.flightId.startsWith("DL") || response.flightId.startsWith("UA")) document.getElementById('btnsblock').innerHTML += `<a style="width: 100%" href="${$f7route.path + '/bags'}" class="button button-tonal" onclick="navigator.vibrate(25);">Track Bags</a>`

      $('.delete-flight').on('click', function () {
        $f7.dialog.confirm('Are you sure you want to delete this flight?', function () {
          const promise = databases.deleteDocument('data', 'flights', flightId);

          promise.then(function (response) {
            $f7.dialog.alert('Flight deleted successfully!', function () {
              databases.listDocuments('data', 'flights').then((resp) => {
            localStorage.setItem("data", JSON.stringify(resp.documents))
            console.log(resp)
            })
              $f7.views.main.router.navigate('/');
            });
          }, function (error) {
            console.log(error);
          });
        });
      });

          let flight = response.fullData;
          function initMap() {
          var mapElem = document.getElementById('map');
          var map = L.map(mapElem);

          L.tileLayer('https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png', {
            attribution: ''
          }).addTo(map);

          var target = L.latLng('41.871314', '-99.869580');
          map.setView(target, 4);

          let coords = JSON.parse(response.coordinates);
          console.log(coords)

          if (coords.length > 0) {
            var path = L.polyline(
                coords,
                {"delay": 400, "weight": 2,"color": "#21de97", "paused": true, "reverse": false}
            ).addTo(map);
            // 5. 
            map.addLayer(path);
            map.fitBounds(path.getBounds());
            L.marker(coords[0]).addTo(map)
          }

          let aircode = response['iata-code'];
          let flightnum = response.flightId.slice(2);
          let now = new Date();
          let yr = now.getFullYear();
          let month = now.getMonth() + 1;
          let day = now.getDate() + 1;

          let plan = [];
          
          try {
            plan = JSON.parse(response.flightPlan);
          }
          catch {
          }

          if (!plan) plan = [];
          console.log(plan)

          if (plan.length > 0) {
            var path = L.polyline(
                plan,
                {"delay": 400, "weight": 2,"color": "#4499ff", "paused": true, "reverse": false, "dashArray": [10, 15]}
              ).addTo(map);
              // 5. 
              map.addLayer(path);
          }

          else {
          axios({
          method: 'get',
          url: `https://corsproxy.io?${encodeURIComponent(`https://www.flightstats.com/v2/api-next/flight-tracker/${aircode}/${flightnum}/${yr}/${month}/${day}/`)}`,
          })
          .then(function (response) {
            console.log(response)
            axios({
              method: 'get',
              url: `https://corsproxy.io?${encodeURIComponent(`https://www.flightstats.com/v2/api-next/flick/${response.data.data.flightId}?guid=34b64945a69b9cac:5ae30721:13ca699d305:XXXX&airline=${aircode}&flight=${flightnum}&flightPlan=true&rqid=0gjukufd01k`)}`,
            }).then(resp => {
              let data = resp.data.data;
              console.log(data)
              let flightPlan = data.flightPlan;
              console.log(flightPlan)
              
              let plan = [];
              for (let i=0; i<flightPlan.length; i++) {
                let point = flightPlan[i];
                plan.push([point.lat, point.lon])
              }

              var path = L.polyline(
                plan,
                {"delay": 400, "weight": 2,"color": "#4499ff", "paused": true, "reverse": false, "dashArray": [10, 15]}
              ).addTo(map);
              // 5. 
              map.addLayer(path);

            })
          })
          }

          }

          initMap();

          let speedPoints = JSON.parse(response.speed);
          let xaxisspeed = [];
          let yaxisspeed = [];
          for (var i = 0; i < speedPoints.length; i++) {
            xaxisspeed.push(i);
            yaxisspeed.push(speedPoints[i]);
          }
          $f7.areaChart.create({
            el: '.speed-chart',
            tooltip: true,
            axis: false,
            axisLabels: xaxisspeed,
            legend: false,
            toggleDatasets: false,
            lineChart: true,
            formatAxisLabel(date) {
              return date;
            },
            formatTooltipAxisLabel(date) {
              return date;
            },
            datasets: [
              {
                label: 'Speed (mph)',
                color: '#f00',
                values: yaxisspeed
              },
            ]
          });

          let altPoints = JSON.parse(response.altitude);
          let xaxisalt = [];
          let yaxisalt = [];
          for (var i = 0; i < altPoints.length; i++) {
            xaxisalt.push(i);
            yaxisalt.push(altPoints[i]);
          }
          $f7.areaChart.create({
            el: '.alt-chart',
            tooltip: true,
            axis: false,
            axisLabels: xaxisalt,
            legend: false,
            toggleDatasets: false,
            lineChart: true,
            formatAxisLabel(date) {
              return date;
            },
            formatTooltipAxisLabel(date) {
              return date;
            },
            datasets: [
              {
                label: 'Altitude (ft)',
                color: '#f00',
                values: yaxisalt
              },
            ]
          });

          document.getElementById("aircraft").innerHTML = flight[0];
          document.getElementById("airline").innerHTML = flight[1];

          document.getElementById("origtz").innerHTML = flight[2].replace(":", "");
          document.getElementById("origairport").innerHTML = flight[3];
          document.getElementById("origcity").innerHTML = flight[4];
          document.getElementById("origgate").innerHTML = flight[5];
          document.getElementById("origterm").innerHTML = flight[6];

          document.getElementById("desttz").innerHTML = flight[7].replace(":", "");
          document.getElementById("destairport").innerHTML = flight[8];
          document.getElementById("destcity").innerHTML = flight[9];
          document.getElementById("destgate").innerHTML = flight[10];
          document.getElementById("destterm").innerHTML = flight[11];

          document.getElementById("actualdist").innerHTML = flight[12];
          document.getElementById("plandist").innerHTML = flight[13];
          document.getElementById("takendist").innerHTML = flight[14];

          document.getElementById("fuel").innerHTML = flight[17]
          document.getElementById("status").innerHTML = flight[18];

          let sdt = flight[19] ? flight[19].replace("Z", "") : "";
          let edt = flight[20] ? flight[20].replace("Z", "") : "";
          let sat = flight[22] ? flight[22].replace("Z", "") : "";
          let eat = flight[23] ? flight[23].replace("Z", "") : "";
          let adt = flight[21] ? flight[21].replace("Z", "") : "";
          let aat = flight[24] ? flight[24].replace("Z", "") : "";

          // if (sdt) if (sdt.includes("Z")) document.getElementById("scheddeptime").innerHTML = new Date(Date.parse(flight[19])).toUTCString().split(":00 GMT")[0].split(" ")[4];
          //          else document.getElementById("scheddeptime").innerHTML = new Date(Date.parse(flight[19])).toLocaleTimeString().split(":00")[0];
          // else document.getElementById("scheddeptime").innerHTML = "N/A";

          sdt ? document.getElementById("scheddeptime").innerHTML = (new Date(Date.parse(sdt)).toLocaleTimeString().split(" ")[0].split(":").splice(0, 2)).join(":") + " " + new Date(Date.parse(sdt)).toLocaleTimeString().split(" ")[1]
          : "N/A";

          edt ? document.getElementById("estdeptime").innerHTML = (new Date(Date.parse(edt)).toLocaleTimeString().split(" ")[0].split(":").splice(0, 2)).join(":") + " " + new Date(Date.parse(edt)).toLocaleTimeString().split(" ")[1]
          : "N/A";

          sat ? document.getElementById("schedarrtime").innerHTML = (new Date(Date.parse(sat)).toLocaleTimeString().split(" ")[0].split(":").splice(0, 2)).join(":") + " " + new Date(Date.parse(sat)).toLocaleTimeString().split(" ")[1]
          : "N/A";

          eat ? document.getElementById("estarrtime").innerHTML = (new Date(Date.parse(eat)).toLocaleTimeString().split(" ")[0].split(":").splice(0, 2)).join(":") + " " + new Date(Date.parse(eat)).toLocaleTimeString().split(" ")[1]
          : "N/A";

          adt ? document.getElementById("actualdeptime").innerHTML = (new Date(Date.parse(adt)).toLocaleTimeString().split(" ")[0].split(":").splice(0, 2)).join(":") + " " + new Date(Date.parse(adt)).toLocaleTimeString().split(" ")[1]
          : "N/A";

          aat ? document.getElementById("actualarrtime").innerHTML = (new Date(Date.parse(aat)).toLocaleTimeString().split(" ")[0].split(":").splice(0, 2)).join(":") + " " + new Date(Date.parse(aat)).toLocaleTimeString().split(" ")[1]
          : "N/A";
          
          document.getElementById("timeline_gate_dep").innerHTML = document.getElementById("scheddeptime").innerHTML;
          document.getElementById("timeline_runway_dep").innerHTML = document.getElementById("deprunway").innerHTML;
          document.getElementById("timeline_flighttime").innerHTML = `Flight en-route for ${flightDuration}`;
          document.getElementById("timeline_runway_arr").innerHTML = document.getElementById("arrrunway").innerHTML;
          document.getElementById("timeline_gate_arr").innerHTML = document.getElementById("schedarrtime").innerHTML;
    });
      })


    // Return render function
    return $render;
  }
</script>