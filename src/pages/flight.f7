<template>
  <div class="page">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a href="#" class="link back">
            <i class="icon icon-back"></i>
            <span class="if-not-md">Back</span>
          </a>
        </div>
        <div class="title" id="title">Flight ${$f7route.path.replace("/flight/", "")}</div>
      </div>
    </div>
    <div class="page-content">
      <div class="block block-strong" style="z-index: 9999; height: 300px;">
        <div id="map" style="height: 300px;"></div>
      </div>
      <div class="block" id="btnsblock" style="display: flex; gap: 20px;">
        <a href="${$f7route.path + '/passes'}" class="button button-fill" style="width: 100%" onclick="navigator.vibrate(25);">Boarding Passes</a>
      </div>
      <p class="block-title">General Info</p>
      <div class="block block-strong">
        <div class="row"><p class="block-title">Aircraft</p><p id="aircraft"></p></div>
        <div class="row"><p class="block-title">Airline Name</p><p id="airline"></p></div>
      </div>

      <p class="block-title">Start</p>
      <div class="block block-strong">
        <div class="row"><p class="block-title">Timezome</p><p id="origtz"></p></div>
        <div class="row"><p class="block-title">Airport</p><p id="origairport"></p></div>
        <div class="row"><p class="block-title">City</p><p id="origcity"></p></div>
      </div>

      <p class="block-title">Destination</p>
      <div class="block block-strong">
        <div class="row"><p class="block-title">Timezome</p><p id="desttz"></p></div>
        <div class="row"><p class="block-title">Airport</p><p id="destairport"></p></div>
        <div class="row"><p class="block-title">City</p><p id="destcity"></p></div>
      </div>

      <p class="block-title">Flight Data</p>
      <div class="block block-strong">
        <div class="row"><p class="block-title">Actual Distance</p><p id="actualdist"></p></div>
        <div class="row"><p class="block-title">Planned Distance</p><p id="plandist"></p></div>
        <div class="row"><p class="block-title">Taken Distance</p><p id="takendist"></p></div>
        </div>

        <div class="block-title">Speed</div>
        <div class="block block-strong block-outline">
          <div class="area-chart area-chart-lines speed-chart"></div>
        </div>
        <div class="block-title">Altitude</div>
        <div class="block block-strong block-outline">
          <div class="area-chart area-chart-lines alt-chart"></div>
        </div>

      <div class="block block-strong">
        <div class="row"><p class="block-title">Fuel Burned</p><p id="fuel"></p></div>
        <div class="row"><p class="block-title">Status</p><p id="status"></p></div>
      </div>

      <p class="block-title">Departure</p>
      <div class="block block-strong">
        <div class="row"><p class="block-title">Scheduled Time</p><p id="scheddeptime"></p></div>
        <div class="row"><p class="block-title">Estimated Time</p><p id="estdeptime"></p></div>
        <div class="row"><p class="block-title">Actual Time</p><p id="actualdeptime"></p></div>
        <div class="row"><p class="block-title">Gate</p><p id="origgate"></p></div>
        <div class="row"><p class="block-title">Terminal</p><p id="origterm"></p></div>
        </div>

    <p class="block-title">Arrival</p>
      <div class="block block-strong">
        <div class="row"><p class="block-title">Scheduled Time</p><p id="schedarrtime"></p></div>
        <div class="row"><p class="block-title">Estimated Time</p><p id="estarrtime"></p></div>
        <div class="row"><p class="block-title">Actual Time</p><p id="actualarrtime"></p></div>
        <div class="row"><p class="block-title">Gate</p><p id="destgate"></p></div>
        <div class="row"><p class="block-title">Terminal</p><p id="destterm"></p></div>
      </div>

      <div class="block block-strong">
        <div class="list list-strong-ios list-outline-ios list-dividers-ios" style="margin-top: 0; margin-bottom: 0;">
          <ul>
            <li>
              <a class="item-link smart-select smart-select-init" data-open-in="sheet">
                <select id="notifTargets" multiple>
                  <option disabled>Select a target</option>
                </select>
                <div class="item-content">
                  <div class="item-inner" id="notifTargetInner">
                    <div class="item-title">Notification Targets</div>
                  </div>
                </div>
              </a>
            </li>
          </ul>
        </div>
      </div>
    
      <div class="block block-strong">
        <a class="button button-fill delete-flight color-red" href="#">Delete Flight</a>
      </div>
    </div>
  </div>
</template>
<style>
  p {
    margin: 10px 0;
  }
</style>
<script>
  const { Client, Databases, ID, Query } = Appwrite;
  const client = new Client();
  client
    .setEndpoint('https://appwrite.shuchir.dev/v1')
    .setProject('wheresmyflight');
  const databases = new Databases(client);

  export default function (props, { $, $f7, $f7route, $on, $onBeforeMount, $onMounted, $onBeforeUnmount, $onUnmounted }) {
    $on('pageInit', () => {
      let flightId = $f7route.path.replace("/flight/", "")
      let userId = localStorage.getItem("login");

      databases.getDocument("settings", "prefs", userId).then(resp => {
        console.log(resp)
        if (resp.ntfyTopic) {
          document.getElementById("notifTargets").innerHTML += `<option value="ntfy:${resp.ntfyTopic}" id="ntfy:${resp.ntfyTopic}">ntfy: ${resp.ntfyTopic}</option>`
        }
        resp.phoneNumbers.forEach(number => {
          document.getElementById("notifTargets").innerHTML += `<option value="sms:${number.phoneNumber}" id="sms:${number.phoneNumber}">sms: ${number.phoneNumber}</option>`
        });
      })
      .catch(() => {
        databases.createDocument("settings", "prefs", userId, {
          userId: userId,
        })
      })

      $("#notifTargets").on("change", function() {
        let targets = $("#notifTargets").val();
        console.log(targets)
        document.getElementById('notifTargetAfter').innerHTML = targets.join(", ")
        databases.updateDocument("data", "flights", flightId, {
          notificationTargets: targets
          })
        })

      databases.getDocument('data', 'flights', flightId).then((response) => {
        document.getElementById('title').innerHTML = `Flight ${response.flightId}`
        
        for (let i=0; i<response.notificationTargets.length; i++) {
          document.getElementById(response.notificationTargets[i]).selected = true;
        }
        document.getElementById('notifTargetInner').innerHTML += `<div class="item-after" id="notifTargetAfter">${response.notificationTargets.join(", ")}</div>`

        console.log(response)
      if (response.flightId.startsWith("DL")) document.getElementById('btnsblock').innerHTML += `<a style="width: 100%" href="${$f7route.path + '/bags'}" class="button button-fill" onclick="navigator.vibrate(25);">Track Bags</a>`

      $('.delete-flight').on('click', function () {
        $f7.dialog.confirm('Are you sure you want to delete this flight?', function () {
          const promise = databases.deleteDocument('data', 'flights', flightId);

          promise.then(function (response) {
            $f7.dialog.alert('Flight deleted successfully!', function () {
              databases.listDocuments('data', 'flights').then((resp) => {
            localStorage.setItem("data", JSON.stringify(resp.documents))
            console.log(resp)
            })
              $f7.views.main.router.navigate('/');
            });
          }, function (error) {
            console.log(error);
          });
        });
      });

          let flight = response.fullData;
          function initMap() {
          var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 4,
            center: {
              lat: 41.871314,
              lng: -99.869580
            },
            mapTypeId: google.maps.MapTypeId.TERRAIN
          });

          var Lat = [];
          var Lng = [];
          let coords = JSON.parse(response.coordinates);
          for (var i = 0; i < coords.length; i++) {
            Lng.push(coords[i][1]);
            Lat.push(coords[i][0]);
          }
          console.log(Lat, Lng)
          var lineSymbol = {
            path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW
          };

          var Poly = new Array();
          for (var i = 0; i < Lat.length; i++) {
            var pos = new google.maps.LatLng(Lat[i], Lng[i]);
            Poly.push(pos);
          }
          var flowline = new google.maps.Polyline({
            path: Poly,
            geodesic: false,
            strokeColor: "#DC143C",
            strokeOpacity: .8,
            strokeWeight: 2,
            map: map
          });

          flowline.setMap(map);

          const svgMarker = {
            path: "M128,216,88,232V200l16-16V152L24,168V136l80-40V48a24,24,0,0,1,48,0V96l80,40v32l-80-16v32L168,200v32Z",
            fillOpacity: 1,
            strokeWeight: 0,
            rotation: 0,
            scale: 0.075,
            anchor: new google.maps.Point(0, 0),
          };

          new google.maps.Marker({
            position: { lat: Lat[0], lng: Lng[0] },
            icon: svgMarker,
            map: map,
          });
          }
          initMap();

          let speedPoints = JSON.parse(response.speed);
          let xaxisspeed = [];
          let yaxisspeed = [];
          for (var i = 0; i < speedPoints.length; i++) {
            xaxisspeed.push(i);
            yaxisspeed.push(speedPoints[i]);
          }
          $f7.areaChart.create({
            el: '.speed-chart',
            tooltip: true,
            axis: false,
            axisLabels: xaxisspeed,
            legend: false,
            toggleDatasets: false,
            lineChart: true,
            formatAxisLabel(date) {
              return date;
            },
            formatTooltipAxisLabel(date) {
              return date;
            },
            datasets: [
              {
                label: 'Speed (mph)',
                color: '#f00',
                values: yaxisspeed
              },
            ]
          });

          let altPoints = JSON.parse(response.altitude);
          let xaxisalt = [];
          let yaxisalt = [];
          for (var i = 0; i < altPoints.length; i++) {
            xaxisalt.push(i);
            yaxisalt.push(altPoints[i]);
          }
          $f7.areaChart.create({
            el: '.alt-chart',
            tooltip: true,
            axis: false,
            axisLabels: xaxisalt,
            legend: false,
            toggleDatasets: false,
            lineChart: true,
            formatAxisLabel(date) {
              return date;
            },
            formatTooltipAxisLabel(date) {
              return date;
            },
            datasets: [
              {
                label: 'altitude (mph)',
                color: '#f00',
                values: yaxisalt
              },
            ]
          });

          document.getElementById("aircraft").innerHTML = flight[0];
          document.getElementById("airline").innerHTML = flight[1];

          document.getElementById("origtz").innerHTML = flight[2].replace(":", "");
          document.getElementById("origairport").innerHTML = flight[3];
          document.getElementById("origcity").innerHTML = flight[4];
          document.getElementById("origgate").innerHTML = flight[5];
          document.getElementById("origterm").innerHTML = flight[6];

          document.getElementById("desttz").innerHTML = flight[7].replace(":", "");
          document.getElementById("destairport").innerHTML = flight[8];
          document.getElementById("destcity").innerHTML = flight[9];
          document.getElementById("destgate").innerHTML = flight[10];
          document.getElementById("destterm").innerHTML = flight[11];

          document.getElementById("actualdist").innerHTML = flight[12];
          document.getElementById("plandist").innerHTML = flight[13];
          document.getElementById("takendist").innerHTML = flight[14];

          document.getElementById("fuel").innerHTML = flight[17]
          document.getElementById("status").innerHTML = flight[18];

          let sdt = flight[19]
          let edt = flight[20]
          let sat = flight[22]
          let eat = flight[23]
          let adt = flight[21]
          let aat = flight[24]

          if (sdt) if (sdt.includes("Z")) document.getElementById("scheddeptime").innerHTML = new Date(Date.parse(flight[19])).toUTCString().split(":00 GMT")[0];
                   else document.getElementById("scheddeptime").innerHTML = new Date(Date.parse(flight[19])).toString().split(":00")[0];
          else document.getElementById("scheddeptime").innerHTML = "N/A";

          if (edt) if (edt.includes("Z")) document.getElementById("estdeptime").innerHTML = new Date(Date.parse(flight[20])).toUTCString().split(":00 GMT")[0];
                   else document.getElementById("estdeptime").innerHTML = new Date(Date.parse(flight[20])).toString().split(":00")[0];
          else document.getElementById("estdeptime").innerHTML = "N/A";

          if (sat) if (sat.includes("Z")) document.getElementById("schedarrtime").innerHTML = new Date(Date.parse(flight[22])).toUTCString().split(":00 GMT")[0];
                   else document.getElementById("schedarrtime").innerHTML = new Date(Date.parse(flight[22])).toString().split(":00")[0];
          else document.getElementById("schedarrtime").innerHTML = "N/A";

          if (eat) if (eat.includes("Z")) document.getElementById("estarrtime").innerHTML = new Date(Date.parse(flight[23])).toUTCString().split(":00 GMT")[0];
                   else document.getElementById("estarrtime").innerHTML = new Date(Date.parse(flight[23])).toString().split(":00")[0];
          else document.getElementById("estarrtime").innerHTML = "N/A";

          if (adt) if (adt.includes("Z")) document.getElementById("actualdeptime").innerHTML = new Date(Date.parse(flight[21])).toUTCString().split(":00 GMT")[0];
                   else document.getElementById("actualdeptime").innerHTML = new Date(Date.parse(flight[21])).toString().split(":00")[0];
           else document.getElementById("actualdeptime").innerHTML = "N/A";

          if (aat) if (aat.includes("Z")) document.getElementById("actualarrtime").innerHTML = new Date(Date.parse(flight[24])).toUTCString().split(":00 GMT")[0];
                   else document.getElementById("actualarrtime").innerHTML = new Date(Date.parse(flight[24])).toString().split(":00")[0];
          else document.getElementById("actualarrtime").innerHTML = "N/A";
          
    });
      })


    // Lifecycle
    $onBeforeMount(() => {
      console.log('onBeforeMount');
    });
    $onMounted(() => {
      console.log('onMounted');
    });
    $onBeforeUnmount(() => {
      console.log('onBeforeUnmount');
    });
    $onUnmounted(() => {
      console.log('onUnmounted');
    });

    // Page Events
    $on('pageMounted', (e, page) => {
      console.log('pageMounted', page);
    });
    $on('pageInit', (e, page) => {
      console.log('pageInit', page);
    });
    $on('pageBeforeIn', (e, page) => {
      console.log('pageBeforeIn', page);
    });
    $on('pageAfterIn', (e, page) => {
      console.log('pageAfterIn', page);
    });
    $on('pageBeforeOut', (e, page) => {
      console.log('pageBeforeOut', page);
    });
    $on('pageAfterOut', (e, page) => {
      console.log('pageAfterOut', page);
    });
    $on('pageBeforeRemove', (e, page) => {
      console.log('pageBeforeRemove', page);
    });

    // Return render function
    return $render;
  }
</script>