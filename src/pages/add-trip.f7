<template>
    <div class="page">
      <div class="navbar">
        <div class="navbar-bg"></div>
        <div class="navbar-inner sliding">
          <div class="left">
            <a href="#" class="link back">
              <i class="icon icon-back"></i>
              <span class="if-not-md">Back</span>
            </a>
          </div>
          <div class="title" id="newTripTitle">New Trip</div>
        </div>
      </div>
      <div class="page-content">
        <div class="block block-strong inset">
          <form id="form">
            <div class="list">
              <ul>
                <li class="item-content item-input item-input-outline">
                  <div class="item-inner">
                    <div class="item-title item-label">Trip Name</div>
                    <div class="item-input-wrap">
                      <input type="text" placeholder="Trip Name" id="name" name="name" />
                      <span class="input-clear-button"></span>
                    </div>
                  </div>
                </li>

                <li class="item-content item-input item-input-outline">
                    <div class="item-inner">
                      <div class="item-title item-label">Dates</div>
                      <div class="item-input-wrap">
                        <input type="text" placeholder="Dates" id="dates" name="dates" />
                        <span class="input-clear-button"></span>
                      </div>
                    </div>
                </li>
              </ul>
            </div>
          </form>
          <div class="block block-strong">
            <a id="mainBtn" class="button button-tonal convert-form-to-data" href="#" onclick="navigator.vibrate(25);">Create</a>
          </div>
        </div>
      </div>
    </div>
  </template>
  <style>
    p {
      margin: 10px 0;
    }
  </style>
  <script>
    const { Client, Databases, ID } = Appwrite;
    const client = new Client();
    client
      .setEndpoint('https://appwrite.shuchir.dev/v1')
      .setProject('wheresmyflight');
    const databases = new Databases(client);
  
    export default function (props, { $, $f7, $f7route, $on, $onBeforeMount, $onMounted, $onBeforeUnmount, $onUnmounted }) {
      $on('pageInit', () => {
        let date = $f7.calendar.create({
          inputEl: '#dates',
          rangePicker: true,
        });


        if ($f7route.path.startsWith("/trip/edit")) {
          let tripId = $f7route.path.split("/")[3];
          databases.getDocument("data", "trips", tripId).then((data) => {
            console.log(data)
            document.getElementById("name").value = data.name;

            let start = new Date(data.start);
            let end = new Date(data.end);

            date.setValue([start, end]);

            document.getElementById("mainBtn").innerHTML = "Update";
            document.getElementById("newTripTitle").innerHTML = "Edit Trip";
          });
        }
  
        let userId = localStorage.getItem("login");
  
        $('.convert-form-to-data').on('click', function () {
          if ($f7route.path.startsWith("/trip/edit")) {
            var formData = $f7.form.convertToData('#form'); 
            $f7.dialog.preloader('Editing...');

            databases.updateDocument("data", "trips", $f7route.path.split("/")[3], {
              name: formData.name,
              start: new Date(formData.dates.split(" - ")[0]),
              end: new Date(formData.dates.split(" - ")[1]),
              userId: userId
            }).then((response) => {
              databases.listDocuments("data", "trips").then((data) => {
                console.log(data)
                localStorage.setItem("trips", JSON.stringify(data.documents))
                $f7.dialog.close();
                $f7.dialog.alert('Saved successfully', () => {
                  $f7.views.main.router.navigate('/trip/'+response.$id);
                });
              });
            }).catch((error) => {
              console.warn(error)
              $f7.dialog.close();
              $f7.dialog.alert('Error creating trip');
            });

          }

          else {
          var formData = $f7.form.convertToData('#form'); 
          $f7.dialog.preloader('Creating...');

          databases.createDocument("data", "trips", ID.unique(), {
            name: formData.name,
            start: new Date(formData.dates.split(" - ")[0]),
            end: new Date(formData.dates.split(" - ")[1]),
            userId: userId
          }, [
            `read("user:${userId}")`, 
            `write("user:${userId}")`
          ]).then((response) => {
            databases.listDocuments("data", "trips").then((data) => {
              console.log(data)
              localStorage.setItem("trips", JSON.stringify(data.documents))
              $f7.dialog.close();
              $f7.dialog.alert('Saved successfully', () => {
                $f7.views.main.router.navigate('/trip/'+response.$id);
              });
            });
          }).catch((error) => {
            console.warn(error)
            $f7.dialog.close();
            $f7.dialog.alert('Error creating trip');
          });

        }
      });
    });
  
      // Return render function
      return $render;
    }
  </script>